### **JavaScript 功能大纲 (基于新的 YAML-like 数据格式)**

**1. 核心功能**

*   **数据解析器 (`parseData`)**:
    *   **输入**:  接收 LLM 输出的 YAML-like 字符串。
    *   **处理**:
        *   使用 YAML 解析库 (如 js-yaml) 或自定义解析函数将字符串解析为 JavaScript 对象。
        *   验证数据结构的完整性和正确性。
    *   **输出**:  返回解析后的 JavaScript 数据对象，包含 `data`, `player`, `plot`, `choices`, `window` 等部分。
    *   **错误处理**:  如果解析失败，捕获错误并调用 `handleError` 函数。
*   **UI 渲染器 (`updateUi`)**:
    *   **输入**:  接收 `parseData` 输出的 JavaScript 数据对象。
    *   **流程**:
        1. **数据预处理**:  根据需要对数据进行预处理，例如格式化文本、计算数值等。
        2. **UI 组件更新**:  根据数据对象更新各个 UI 组件的内容和状态。
            *   **标题 (`#game-title`)**:  更新游戏标题，使用 `data.title`。
            *   **系统状态栏 (`#sys-info`)**:  更新时间、积分、HP、EP 等信息，使用 `data.player`。
            *   **故事情节区 (`#plot-section`)**:  显示剧情文本，使用 `data.plot.dialogue`，需要处理对话历史的展示。
            *   **选择区 (`#choices-section`)**:  根据信任值筛选并显示选项按钮，使用 `data.choices.options` 和 `data.relationships` 中的信任值。
            *   **窗口管理区 (`#windows` 或 `#main-window`)**:
                *   根据 `data.window` 的状态创建、更新、显示和隐藏各个窗口。
                *   调用相应的渲染函数更新窗口内容，如 `renderMap`, `updateSkillsWindow`, `updateWorldsWindow`, `updateShopWindow`, `updateAchievementsWindow`, `updateCharacterWindow`。
    *   **错误处理**:  如果在 UI 更新过程中发生错误，捕获错误并调用 `handleError` 函数。

*   **UI 组件渲染函数**:
    *   **地图渲染 (`renderMap`)**:
        *   **输入**:  `data.window.map.content`。
        *   **处理**:  根据地图数据渲染地图，并根据位置状态应用不同的样式 (当前位置、可前往、锁定、隐藏)。
        *   **事件绑定**:  为可前往的地点绑定点击事件，触发 `handleMapClick`。
    *   **技能树渲染 (`updateSkillsWindow`)**:
        *   **输入**:  `data.window.skills.content`。
        *   **处理**:  渲染技能树面板，展示技能名称和等级。
    *   **世界列表渲染 (`updateWorldsWindow`)**:
        *   **输入**:  `data.window.worlds.content`, `data.window.worlds.page`。
        *   **处理**:  渲染世界列表，支持分页显示。
        *   **事件绑定**:  为分页按钮绑定点击事件，触发 `handleWorldsWindowPage`。
    *   **商店渲染 (`updateShopWindow`)**:
        *   **输入**:  `data.window.shop.content`。
        *   **处理**:  渲染商店界面，展示商品列表和价格。
        *   **事件绑定**:  为购买按钮绑定点击事件，触发 `handleShopBuy`。
    *   **成就渲染 (`updateAchievementsWindow`)**:
        *   **输入**:  `data.window.achievements.content`。
        *   **处理**:  渲染成就列表，展示已获得的成就。
    *   **角色状态渲染 (`updateCharacterWindow`)**:
        *   **输入**:  `data.window.character.content`。
        *   **处理**:  渲染角色属性面板，展示角色信息。
*   **事件处理器**:
    *   **选项选择 (`handleChoice`)**:
        *   **输入**:  用户点击的选项 `id`。
        *   **处理**:
            *   根据 `id` 获取对应的选项文本。
            *   将选项文本设置到 SillyTavern 输入框 (`.st-text`)。
            *   触发输入框的 `input` 和 `change` 事件，通知 SillyTavern 更新内容。
        *   **可选**:  根据选项内容触发其他逻辑，如更新游戏状态、播放音效等。
    *   **地图交互 (`handleMapClick`)**:
        *   **输入**:  用户点击的地图坐标。
        *   **处理**:
            *   根据坐标判断是否为可前往地点。
            *   如果是，将地点信息设置到 SillyTavern 输入框，或触发相应的游戏逻辑。
        *   **可选**:  更新地图显示，例如显示移动路径等。
    *   **窗口操作**:
        *   **拖拽 (`dragElement`)**:  实现窗口拖拽功能。
        *   **置顶 (`bringToFront`)**:  将窗口置于最顶层。
        *   **关闭/展开 (`toggleWindow`)**:  切换窗口的显示/隐藏状态，并更新 `windowStates`。
        *   **最大化/最小化**:  实现窗口的最大化和最小化功能，并更新 `windowStates`。
    *   **设置面板 (`handleSettings`)**:
        *   处理设置面板中的操作，例如切换主题、调整音量等。
        *   **主题切换**:  调用 `applyWindowTheme` 应用新的主题样式。
        *   **状态保存**:  将设置保存到本地存储 (使用 `GM_setValue`)。
    *   **世界列表分页 (`handleWorldsWindowPage`)**:
        *   **输入**:  用户点击的分页按钮 (上一页/下一页)。
        *   **处理**:  更新 `worldsData` 中的当前页码，并调用 `updateWorldsWindow` 重新渲染世界列表。
    *   **商店购买 (`handleShopBuy`)**:
        *   **输入**:  用户点击购买的商品 `id`。
        *   **处理**:
            *   根据 `id` 获取商品价格。
            *   检查玩家积分是否足够。
            *   如果足够，扣除积分，增加物品到背包 (`data.window.inventory.content`)，并更新 UI。
            *   如果不足，提示玩家积分不足。
        *   **可选**:  触发购买音效、记录购买历史等。
    *   **背包使用 (`handleInventoryUse`)**:
        *   **输入**:  用户点击使用的物品 `id`。
        *   **处理**:
            *   根据 `id` 获取物品效果。
            *   应用物品效果，例如恢复 HP、增加 EP、提升技能等。
            *   从背包中移除物品，并更新 UI。
        *   **可选**:  触发使用音效、记录使用历史等。
        *     **页面内发送按钮**:
          - 获取 SillyTavern 输入框 (`.st-text`)。
          - 触发输入框的 `submit` 事件，发送消息。

**2. 数据管理**

*   **窗口状态管理 (`windowStates`)**:
    *   **数据结构**:  使用 JavaScript 对象存储窗口状态，键为窗口 ID，值为包含位置、大小、显示状态、主题等信息的对象。
    *   **初始化**:  从本地存储 (使用 `GM_getValue`) 加载窗口状态，如果不存在则使用默认值。
    *   **更新**:  在窗口操作 (拖拽、关闭/展开、最大化/最小化) 后更新 `windowStates`，并保存到本地存储。
    *   **应用**:  在 UI 渲染时，根据 `windowStates` 设置窗口的位置、大小、显示状态和主题。
*   **成就管理 (`achievements`)**:
    *   **数据结构**:  使用数组存储已获得的成就 ID。
    *   **初始化**:  从本地存储加载成就数据。
    *   **更新**:  在达成新成就时，将成就 ID 添加到数组，并保存到本地存储。
    *   **应用**:  在成就窗口 (`#achievements-window`) 中显示已获得的成就。
*   **世界列表数据 (`worldsData`)**:
    *   **数据结构**:  使用对象存储世界列表数据，包含当前页码、每页显示数量等信息。
    *   **初始化**:  设置默认值。
    *   **更新**:  在切换分页时更新 `worldsData`。
    *   **应用**:  在渲染世界列表时，根据 `worldsData`  筛选显示的内容。
*   **游戏状态存储**:
    *   使用 `GM_setValue` 和 `GM_getValue` 存储和读取游戏状态，例如当前世界、时间、积分、HP、EP、角色关系等。
    *   **数据结构**:  可以使用 JSON 格式存储复杂的对象数据。

**3. 其他功能（可选但不优先）**

*   **错误处理 (`handleError`)**:
    *   **输入**:  错误信息或异常对象。
    *   **处理**:
        *   在控制台打印错误信息。
        *   在 UI 上显示错误提示，例如弹窗或在特定区域显示错误消息。
        *   **可选**:  记录错误日志，以便后续分析。
        *   **可选**:  尝试自动恢复，例如重置某些状态或重新加载数据。
*   **调试工具**:
    *   **LLM 输出查看器**:  显示 LLM 输出的原始 YAML-like 数据，方便调试解析器。
        *   **实现**:  可以将原始数据输出到控制台，或创建一个专门的 UI 元素来显示。
    *   **事件日志**:  记录用户交互事件和系统内部事件，例如点击、窗口操作、数据更新等。
        *   **实现**:  可以将日志输出到控制台，或创建一个专门的 UI 元素来显示日志。
    *   **性能监控**:  监控 UI 渲染性能和数据处理性能，例如渲染时间、解析时间等。
        *   **实现**:  可以使用浏览器的性能分析工具，或在代码中添加性能计时器。
    *   **开发者模式**:  提供一个开关，用于启用/禁用调试工具。
*   **本地存储管理 (`storageManager`)**:
    *   **封装**:  封装 `GM_setValue` 和 `GM_getValue`，提供更方便的 API 来管理本地存储。
    *   **数据序列化**:  自动将 JavaScript 对象序列化为 JSON 字符串，反之亦然。
    *   **错误处理**:  处理本地存储读写错误。
    *   **可选**:  提供缓存机制，减少本地存储读写次数。

**4. 主题管理**

*   **预设主题列表 (`presetThemes`)**:
    *   **数据结构**:  使用 JavaScript 对象存储预设主题，键为主题名称，值为包含 CSS 样式规则的对象。
    *   **示例**:
        ```javascript
        const presetThemes = {
          "科技风": {
            backgroundColor: "#222",
            textColor: "#eee",
            windowColor: "#333",
            buttonColor: "#007bff",
            // ... 其他样式规则
          },
          "简约风": {
            backgroundColor: "#f5f5f5",
            textColor: "#333",
            windowColor: "#fff",
            buttonColor: "#6c757d",
            // ... 其他样式规则
          },
          // ... 更多主题
        };
        ```
*   **默认主题 (`defaultTheme`)**:  指定默认主题的名称，或直接定义默认的 CSS 样式对象。
*   **主题应用 (`applyWindowTheme`)**:
    *   **输入**:  主题名称或 CSS 样式对象，窗口 ID 或窗口元素。
    *   **处理**:
        *   根据主题名称从 `presetThemes` 中获取对应的 CSS 样式规则。
        *   将样式规则应用到指定的窗口元素上。
        *   **实现**:  可以直接修改元素的 `style` 属性，或动态创建/修改 CSS 规则。
    *   **存储**:  将当前主题保存到本地存储，以便下次启动时自动应用。
*   **主题切换 UI**:
    *   提供 UI 元素，例如下拉菜单或按钮组，让用户可以选择不同的主题。
    *   **事件绑定**:  为主题切换 UI 元素绑定点击事件，触发 `applyWindowTheme` 应用新的主题。

**5. 地图管理**

*   **地图解析 (`parseMap`)**:
    *   **输入**:  `data.window.map.content`。
    *   **处理**:  将地图数据解析为二维数组或更方便处理的数据结构。
    *   **输出**:  返回解析后的地图数据。
*   **地图渲染 (`renderMap`)**:
    *   **输入**:  解析后的地图数据。
    *   **处理**:
        *   根据地图数据创建地图网格，例如使用 HTML 表格或 div 元素。
        *   根据每个地图单元格的状态 (当前位置、可前往、锁定、隐藏)，应用不同的 CSS 样式或显示不同的图标。
        *   **当前位置**:  突出显示当前位置。
        *   **可前往**:  显示可点击的样式，并绑定点击事件 `handleMapClick`。
        *   **锁定**:  显示不可点击的样式，或显示锁定的图标。
        *   **隐藏**:  不显示该单元格。
    *   **可选**:  支持地图缩放和平移。
    *   **可选**:  使用 Canvas 绘制地图，提高性能。
    *   **可选**:  显示地图图例，解释不同图标和样式的含义。

**6. 初始化 (`init`)**

*   **调用时机**:  在页面加载完成后调用，或在 SillyTavern 插入自定义 HTML 后调用。
*   **流程**:
    1. 初始化本地存储管理器 (`storageManager.init`)。
    2. 加载游戏状态，包括窗口状态、成就、当前世界、时间、积分等。
    3. 初始化 UI 元素，例如创建窗口、绑定事件等。
        *   **窗口初始化**:  根据 `windowStates` 创建和设置窗口状态。
    4. 加载默认主题，或从本地存储加载上次使用的主题，并应用主题。
    5. 准备好接收 LLM 输出。

**7. 主循环 (`gameLoop`)**

*   **可选**:  如果游戏需要实时更新，可以实现一个主循环。
*   **流程**:
    *   **处理输入**:  获取用户输入或 LLM 输出。
    *   **更新游戏状态**:  根据输入更新游戏数据。
    *   **渲染 UI**:  根据更新后的游戏状态重新渲染 UI。
    *   **定时执行**:  使用 `requestAnimationFrame` 或 `setInterval` 定时执行主循环。


注意事项：
**页面结构所处位置**
- 本项目所有内容都是在SillyTavern的消息窗口中内嵌渲染, 因此都是在iframe中运行。
- 核心内容由LLM驱动，代码负责解析并填充到HTML页面中。

**SillyTavern 负责捕获 LLM 输出**
- SillyTavern 会使用自带的正则表达式捕获 LLM 的输出内容。
- 我们不需要使用 Tampermonkey API 或其他方法主动获取消息内容。
- SillyTavern 会将捕获到的内容插入到我们 HTML 代码中的特定区域 `#llm-output`。
- SillyTavern 会自动处理流式输出的组装，我们每次收到的都是当前时刻的完整消息内容，无需自行处理片段组装。 因此，即使在流式输出过程中，我们仍然可以像处理完整数据一样解析和渲染 UI。基于这个特性，我们无需自己处理流式输出的组装也仍能实现流式 UI 渲染。

以下是摘抄自隔壁模板的代码，精简并保留必要说明和示例，用于实现点击选项传递内容到 SillyTavern 输入框和页面内发送按钮的功能：
```javascript
// --- 点击选项传递内容 ---
// 假设 choices 是一个包含选项文本的数组
const choicesContainer = document.getElementById('choices-container'); // 选项容器
choices.forEach(choice => {
  const button = document.createElement('button');
  button.textContent = choice;
  button.classList.add('choice-button'); // 添加样式类
  button.addEventListener('click', () => {
    const stText = document.querySelector('.st-text'); // 获取 SillyTavern 输入框
    if (stText) {
      stText.value = choice; // 设置选项内容到输入框
      // 触发输入框的 input 和 change 事件，通知 SillyTavern 内容已更新
      stText.dispatchEvent(new Event('input', { bubbles: true }));
      stText.dispatchEvent(new Event('change', { bubbles: true }));
    } else {
      console.error('Cannot find .st-text element');
    }
  });
  choicesContainer.appendChild(button);
});
// --- 页面内发送按钮 ---
const customChoiceContainer = document.getElementById('custom-choice-container'); // 自定义选项容器
const stSendButton = customChoiceContainer.querySelector('.st-send-button'); // 发送按钮
stSendButton.addEventListener('click', () => {
  const stText = customChoiceContainer.querySelector('.st-text'); // 获取 SillyTavern 输入框
  if (stText) {
    // 触发输入框的 submit 事件，发送消息
    stText.form.dispatchEvent(new Event('submit', { bubbles: true }));
  } else {
    console.error('Cannot find .st-text element');
  }
});
```
### 说明
-  这段代码假设 SillyTavern 的输入框类名为 `.st-text`，发送按钮类名为 `.st-send-button`。
-  `dispatchEvent` 方法用于手动触发事件。
-  `bubbles: true` 表示事件会冒泡到父元素。
### 示例
-  当用户点击选项按钮时，会将选项内容设置到 SillyTavern 的输入框中，并触发 `input` 和 `change` 事件，通知 SillyTavern 内容已更新。
-  当用户点击发送按钮时，会触发 SillyTavern 输入框的 `submit` 事件，发送消息给 LLM。
### 集成到你的项目
-  将这段代码添加到你的 JavaScript 文件中。
-  修改选择器，使其与 SillyTavern 的实际 HTML 结构相匹配。
-  在你的 `updateUi` 函数中，调用 `showChoices()` 函数来显示选择界面。
-  确保你的 HTML 代码中包含了选项容器和自定义选项容器。
